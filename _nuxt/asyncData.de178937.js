import{r as y,S as _,g,o as P,T as m,w,U as x,u as b,N as k}from"./entry.e81a16d7.js";const C=()=>null;function O(...r){const l=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(l);let[a,u,t={}]=r;if(typeof a!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof u!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");t.server=t.server??!0,t.default=t.default??C,t.lazy=t.lazy??!1,t.immediate=t.immediate??!0;const e=x(),f=()=>e.isHydrating?e.payload.data[a]:e.static.data[a],d=()=>f()!==void 0;e._asyncData[a]||(e._asyncData[a]={data:y(f()??t.default()),pending:y(!d()),error:_(e.payload._errors,a),status:y("idle")});const n={...e._asyncData[a]};n.refresh=n.execute=(i={})=>{if(e._asyncDataPromises[a]){if(i.dedupe===!1)return e._asyncDataPromises[a];e._asyncDataPromises[a].cancelled=!0}if((i._initial||e.isHydrating&&i._initial!==!1)&&d())return f();n.pending.value=!0,n.status.value="pending";const c=new Promise((s,o)=>{try{s(u(e))}catch(D){o(D)}}).then(s=>{if(c.cancelled)return e._asyncDataPromises[a];let o=s;t.transform&&(o=t.transform(s)),t.pick&&(o=z(o,t.pick)),n.data.value=o,n.error.value=null,n.status.value="success"}).catch(s=>{if(c.cancelled)return e._asyncDataPromises[a];n.error.value=s,n.data.value=b(t.default()),n.status.value="error"}).finally(()=>{c.cancelled||(n.pending.value=!1,e.payload.data[a]=n.data.value,n.error.value&&(e.payload._errors[a]=k(n.error.value)),delete e._asyncDataPromises[a])});return e._asyncDataPromises[a]=c,e._asyncDataPromises[a]};const p=()=>n.refresh({_initial:!0}),v=t.server!==!1&&e.payload.serverRendered;{const i=g();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const s=i._nuxtOnBeforeMountCbs;i&&(P(()=>{s.forEach(o=>{o()}),s.splice(0,s.length)}),m(()=>s.splice(0,s.length)))}v&&e.isHydrating&&d()?(n.pending.value=!1,n.status.value=n.error.value?"error":"success"):i&&(e.payload.serverRendered&&e.isHydrating||t.lazy)&&t.immediate?i._nuxtOnBeforeMountCbs.push(p):t.immediate&&p(),t.watch&&w(t.watch,()=>n.refresh());const c=e.hook("app:data:refresh",s=>{if(!s||s.includes(a))return n.refresh()});i&&m(c)}const h=Promise.resolve(e._asyncDataPromises[a]).then(()=>n);return Object.assign(h,n),h}function M(...r){const l=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(l);const[a,u,t]=r;return O(a,u,{...t,lazy:!0},null)}function z(r,l){const a={};for(const u of l)a[u]=r[u];return a}export{M as a,O as u};
