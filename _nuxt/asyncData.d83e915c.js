import{S as g,h as m,T as P,i as x,U as D,j as b,f as w,N as k,g as C}from"./entry.c9d3860f.js";const O=()=>null;function z(...r){var h;const f=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(f);let[a,c,e={}]=r;if(typeof a!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof c!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=e.server??!0,e.default=e.default??O,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0;const t=g(),l=()=>t.isHydrating?t.payload.data[a]:t.static.data[a],d=()=>l()!==void 0;t._asyncData[a]||(t._asyncData[a]={data:m(l()??((h=e.default)==null?void 0:h.call(e))??null),pending:m(!d()),error:P(t.payload._errors,a)});const n={...t._asyncData[a]};n.refresh=n.execute=(i={})=>{if(t._asyncDataPromises[a]){if(i.dedupe===!1)return t._asyncDataPromises[a];t._asyncDataPromises[a].cancelled=!0}if(i._initial&&d())return l();n.pending.value=!0;const u=new Promise((s,o)=>{try{s(c(t))}catch(_){o(_)}}).then(s=>{if(u.cancelled)return t._asyncDataPromises[a];let o=s;e.transform&&(o=e.transform(s)),e.pick&&(o=B(o,e.pick)),n.data.value=o,n.error.value=null}).catch(s=>{var o;if(u.cancelled)return t._asyncDataPromises[a];n.error.value=s,n.data.value=w(((o=e.default)==null?void 0:o.call(e))??null)}).finally(()=>{u.cancelled||(n.pending.value=!1,t.payload.data[a]=n.data.value,n.error.value&&(t.payload._errors[a]=k(n.error.value)),delete t._asyncDataPromises[a])});return t._asyncDataPromises[a]=u,t._asyncDataPromises[a]};const y=()=>n.refresh({_initial:!0}),v=e.server!==!1&&t.payload.serverRendered;{const i=C();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const s=i._nuxtOnBeforeMountCbs;i&&(x(()=>{s.forEach(o=>{o()}),s.splice(0,s.length)}),D(()=>s.splice(0,s.length)))}v&&t.isHydrating&&d()?n.pending.value=!1:i&&(t.payload.serverRendered&&t.isHydrating||e.lazy)&&e.immediate?i._nuxtOnBeforeMountCbs.push(y):e.immediate&&y(),e.watch&&b(e.watch,()=>n.refresh());const u=t.hook("app:data:refresh",s=>{if(!s||s.includes(a))return n.refresh()});i&&D(u)}const p=Promise.resolve(t._asyncDataPromises[a]).then(()=>n);return Object.assign(p,n),p}function E(...r){const f=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(f);const[a,c,e]=r;return z(a,c,{...e,lazy:!0},null)}function B(r,f){const a={};for(const c of f)a[c]=r[c];return a}export{E as a,z as u};
